
synch.ko.unstripped:     file format elf32-littlearm


Disassembly of section .text:

00000000 <timer_func>:
}

static void timer_func(struct timer_list *timer)
{

}
   0:	e12fff1e 	bx	lr

00000004 <button_irq_handler>:
	pr_debug("Entered button_irq_handler(count: %d)\n", (*(int *)data)++);
   4:	e3000000 	movw	r0, #0
   8:	e3400000 	movt	r0, #0
{
   c:	e92d4070 	push	{r4, r5, r6, lr}
	pr_debug("Entered button_irq_handler(count: %d)\n", (*(int *)data)++);
  10:	e1d031b2 	ldrh	r3, [r0, #18]
  14:	e3130004 	tst	r3, #4
  18:	1a000016 	bne	78 <button_irq_handler+0x74>
	time_head.num++;
  1c:	e3004000 	movw	r4, #0
  20:	e3404000 	movt	r4, #0
	node_i = list_first_entry(&time_head.node, struct time_node_t, node);
  24:	e5945000 	ldr	r5, [r4]
	time_head.num++;
  28:	e594300c 	ldr	r3, [r4, #12]
  2c:	e2833001 	add	r3, r3, #1
	node_i->num = time_head.num;
  30:	e5853010 	str	r3, [r5, #16]
	time_head.num++;
  34:	e584300c 	str	r3, [r4, #12]
	node_i->time = ktime_get();
  38:	ebfffffe 	bl	0 <ktime_get>
})

static __always_inline
void __read_once_size(const volatile void *p, void *res, int size)
{
	__READ_ONCE_SIZE;
  3c:	e5943000 	ldr	r3, [r4]
 */
static inline void list_rotate_left(struct list_head *head)
{
	struct list_head *first;

	if (!list_empty(head)) {
  40:	e1540003 	cmp	r4, r3
  44:	e1c500f8 	strd	r0, [r5, #8]
  48:	0a000008 	beq	70 <button_irq_handler+0x6c>
		first = head->next;
  4c:	e5943000 	ldr	r3, [r4]
	__list_del(entry->prev, entry->next);
  50:	e8930006 	ldm	r3, {r1, r2}
	next->prev = prev;
  54:	e5812004 	str	r2, [r1, #4]
static __always_inline void __write_once_size(volatile void *p, void *res, int size)
{
	switch (size) {
	case 1: *(volatile __u8 *)p = *(__u8 *)res; break;
	case 2: *(volatile __u16 *)p = *(__u16 *)res; break;
	case 4: *(volatile __u32 *)p = *(__u32 *)res; break;
  58:	e5821000 	str	r1, [r2]
	__list_add(new, head->prev, head);
  5c:	e5942004 	ldr	r2, [r4, #4]
	next->prev = new;
  60:	e5843004 	str	r3, [r4, #4]
	new->next = next;
  64:	e5834000 	str	r4, [r3]
	new->prev = prev;
  68:	e5832004 	str	r2, [r3, #4]
  6c:	e5823000 	str	r3, [r2]
}
  70:	e3a00002 	mov	r0, #2
  74:	e8bd8070 	pop	{r4, r5, r6, pc}
	pr_debug("Entered button_irq_handler(count: %d)\n", (*(int *)data)++);
  78:	e5912000 	ldr	r2, [r1]
  7c:	e1a0c001 	mov	ip, r1
  80:	e3001000 	movw	r1, #0
  84:	e3401000 	movt	r1, #0
  88:	e2823001 	add	r3, r2, #1
  8c:	e58c3000 	str	r3, [ip]
  90:	ebfffffe 	bl	0 <__dynamic_pr_debug>
  94:	eaffffe0 	b	1c <button_irq_handler+0x18>

00000098 <button_thread_handler>:
	pr_debug("Entered button_thread_handler\n");
  98:	e3000000 	movw	r0, #0
  9c:	e3400000 	movt	r0, #0
  a0:	e1d032ba 	ldrh	r3, [r0, #42]	; 0x2a
  a4:	e3130004 	tst	r3, #4
  a8:	1a000001 	bne	b4 <button_thread_handler+0x1c>
}
  ac:	e3a00001 	mov	r0, #1
  b0:	e12fff1e 	bx	lr
{
  b4:	e92d4010 	push	{r4, lr}
	pr_debug("Entered button_thread_handler\n");
  b8:	e2800018 	add	r0, r0, #24
  bc:	e3001000 	movw	r1, #0
  c0:	e3401000 	movt	r1, #0
  c4:	ebfffffe 	bl	0 <__dynamic_pr_debug>
}
  c8:	e3a00001 	mov	r0, #1
  cc:	e8bd8010 	pop	{r4, pc}

000000d0 <init_gpios>:
 * @led:	GPIO number if a LED
 *
 * Return: Error code (0 for OK)
 */
int init_gpios(unsigned button, unsigned led)
{
  d0:	e92d4070 	push	{r4, r5, r6, lr}
  d4:	e1a05001 	mov	r5, r1
	rc = gpio_request(gpio, "Onboard user button");
  d8:	e3001000 	movw	r1, #0
  dc:	e3401000 	movt	r1, #0
{
  e0:	e1a06000 	mov	r6, r0
	rc = gpio_request(gpio, "Onboard user button");
  e4:	ebfffffe 	bl	0 <gpio_request>
	if (rc)
  e8:	e2504000 	subs	r4, r0, #0
  ec:	0a000005 	beq	108 <init_gpios+0x38>
	int rc;

	rc = button_init(button);
	if (unlikely(rc)) {
		pr_err("Cannot init GPIO%d as an input\n", button);
  f0:	e3000000 	movw	r0, #0
  f4:	e1a01006 	mov	r1, r6
  f8:	e3400000 	movt	r0, #0
  fc:	ebfffffe 	bl	0 <printk>
	return 0;
err_led_init:
	button_deinit(button);
err_button_init:
	return rc;
}
 100:	e1a00004 	mov	r0, r4
 104:	e8bd8070 	pop	{r4, r5, r6, pc}
extern int gpio_request(unsigned gpio, const char *label);
extern void gpio_free(unsigned gpio);

static inline int gpio_direction_input(unsigned gpio)
{
	return gpiod_direction_input(gpio_to_desc(gpio));
 108:	e1a00006 	mov	r0, r6
 10c:	ebfffffe 	bl	0 <gpio_to_desc>
 110:	ebfffffe 	bl	0 <gpiod_direction_input>
	if (rc)
 114:	e2504000 	subs	r4, r0, #0
 118:	1a00000b 	bne	14c <init_gpios+0x7c>
}
static inline int gpio_direction_output(unsigned gpio, int value)
{
	return gpiod_direction_output_raw(gpio_to_desc(gpio), value);
 11c:	e1a00005 	mov	r0, r5
 120:	ebfffffe 	bl	0 <gpio_to_desc>
 124:	e1a01004 	mov	r1, r4
 128:	ebfffffe 	bl	0 <gpiod_direction_output_raw>
	if (rc) {
 12c:	e2504000 	subs	r4, r0, #0
 130:	1a000008 	bne	158 <init_gpios+0x88>
{
	return gpiod_get_raw_value(gpio_to_desc(gpio));
}
static inline void __gpio_set_value(unsigned gpio, int value)
{
	return gpiod_set_raw_value(gpio_to_desc(gpio), value);
 134:	e1a00005 	mov	r0, r5
 138:	ebfffffe 	bl	0 <gpio_to_desc>
 13c:	e3a01001 	mov	r1, #1
 140:	ebfffffe 	bl	0 <gpiod_set_raw_value>
}
 144:	e1a00004 	mov	r0, r4
 148:	e8bd8070 	pop	{r4, r5, r6, pc}
	gpio_free(gpio);
 14c:	e1a00006 	mov	r0, r6
 150:	ebfffffe 	bl	0 <gpio_free>
 154:	eaffffe5 	b	f0 <init_gpios+0x20>
		pr_err("Cannot init GPIO%d as an output \n", led);
 158:	e1a01005 	mov	r1, r5
 15c:	e3000000 	movw	r0, #0
 160:	e3400000 	movt	r0, #0
 164:	ebfffffe 	bl	0 <printk>
	gpio_free(gpio);
 168:	e1a00006 	mov	r0, r6
 16c:	ebfffffe 	bl	0 <gpio_free>
 170:	eaffffe2 	b	100 <init_gpios+0x30>

00000174 <deinit_gpios>:
 * deinit_gpios - free button and set LED state to LOW
 * @button:	GPIO number of a button
 * @led:	GPIO number if a LED
 */
void deinit_gpios(unsigned button, unsigned led)
{
 174:	e92d4010 	push	{r4, lr}
 178:	e1a04001 	mov	r4, r1
	gpio_free(gpio);
 17c:	ebfffffe 	bl	0 <gpio_free>
 180:	e1a00004 	mov	r0, r4
 184:	ebfffffe 	bl	0 <gpio_to_desc>
 188:	e3a01000 	mov	r1, #0
	button_deinit(button);
	gpio_set_value(led, 0);
}
 18c:	e8bd4010 	pop	{r4, lr}
 190:	eafffffe 	b	0 <gpiod_set_raw_value>

Disassembly of section .init.text:

00000000 <init_module>:

static int __init synch_init(void)
{
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int rc;

	pr_crit("Start initialization\n");
   4:	e3000000 	movw	r0, #0
{
   8:	e24dd00c 	sub	sp, sp, #12
	pr_crit("Start initialization\n");
   c:	e3400000 	movt	r0, #0
  10:	ebfffffe 	bl	0 <printk>
			unsigned int index = kmalloc_index(size);

			if (!index)
				return ZERO_SIZE_PTR;

			return kmem_cache_alloc_trace(kmalloc_caches[index],
  14:	e3003000 	movw	r3, #0
  18:	e3403000 	movt	r3, #0
  1c:	e3a010c0 	mov	r1, #192	; 0xc0
  20:	e3a02078 	mov	r2, #120	; 0x78
  24:	e3401060 	movt	r1, #96	; 0x60
  28:	e593001c 	ldr	r0, [r3, #28]
	WRITE_ONCE(list->next, list);
  2c:	e3004000 	movw	r4, #0
  30:	ebfffffe 	bl	0 <kmem_cache_alloc_trace>
  34:	e3404000 	movt	r4, #0
  38:	e5844000 	str	r4, [r4]
	list->prev = list;
  3c:	e5844004 	str	r4, [r4, #4]
	if (unlikely(!node_arr)) {
  40:	e2505000 	subs	r5, r0, #0
  44:	1a00001d 	bne	c0 <init_module+0xc0>
		pr_crit("Cannot allocate memory. Abort...\n");
  48:	e3000000 	movw	r0, #0
  4c:	e3400000 	movt	r0, #0
  50:	ebfffffe 	bl	0 <printk>
	return gpiod_cansleep(gpio_to_desc(gpio));
}

static inline int __gpio_to_irq(unsigned gpio)
{
	return gpiod_to_irq(gpio_to_desc(gpio));
  54:	e3a00048 	mov	r0, #72	; 0x48
  58:	ebfffffe 	bl	0 <gpio_to_desc>
  5c:	ebfffffe 	bl	0 <gpiod_to_irq>
	button_irq = gpio_to_irq(BUTTON);
  60:	e3003000 	movw	r3, #0
  64:	e3403000 	movt	r3, #0
  68:	e1a06003 	mov	r6, r3
	if (unlikely(button_irq < 0))
  6c:	e3500000 	cmp	r0, #0
	button_irq = gpio_to_irq(BUTTON);
  70:	e5830000 	str	r0, [r3]
	if (unlikely(button_irq < 0))
  74:	ba000024 	blt	10c <init_module+0x10c>
	rc = request_threaded_irq(	button_irq,
  78:	e2844010 	add	r4, r4, #16
  7c:	e3003000 	movw	r3, #0
  80:	e58d4004 	str	r4, [sp, #4]
  84:	e3403000 	movt	r3, #0
  88:	e3002000 	movw	r2, #0
  8c:	e58d3000 	str	r3, [sp]
  90:	e3402000 	movt	r2, #0
  94:	e3a03002 	mov	r3, #2
  98:	e3001000 	movw	r1, #0
  9c:	e3401000 	movt	r1, #0
  a0:	ebfffffe 	bl	0 <request_threaded_irq>
	if (unlikely(!rc)) {
  a4:	e3500000 	cmp	r0, #0
		pr_crit("Cannot initialize button IRQ...");
  a8:	03000000 	movweq	r0, #0
	pr_info("Button IRQ has been initialized\n");
  ac:	13000000 	movwne	r0, #0
		pr_crit("Cannot initialize button IRQ...");
  b0:	03400000 	movteq	r0, #0
	pr_info("Button IRQ has been initialized\n");
  b4:	13400000 	movtne	r0, #0
  b8:	ebfffffe 	bl	0 <printk>
	rc = init_list(5);
	if (!rc)
		return rc;

	rc = init_button_irq();
	if (!rc)
  bc:	ea000029 	b	168 <init_module+0x168>
  c0:	e285c078 	add	ip, r5, #120	; 0x78
  c4:	e1a02004 	mov	r2, r4
  c8:	e1a03005 	mov	r3, r5
		node_arr[i].time = 0;
  cc:	e3a06000 	mov	r6, #0
  d0:	e3a07000 	mov	r7, #0
		node_arr[i].num = 0;
  d4:	e3a00000 	mov	r0, #0
	__list_add(new, head, head->next);
  d8:	e5931000 	ldr	r1, [r3]
  dc:	e5830010 	str	r0, [r3, #16]
		node_arr[i].time = 0;
  e0:	e1c360f8 	strd	r6, [r3, #8]
	next->prev = new;
  e4:	e5812004 	str	r2, [r1, #4]
	new->prev = prev;
  e8:	e5823004 	str	r3, [r2, #4]
  ec:	e4834018 	str	r4, [r3], #24
	for (i = 0; i < len; i++) {
  f0:	e153000c 	cmp	r3, ip
  f4:	1afffff7 	bne	d8 <init_module+0xd8>
	pr_info("Time list has been initialized\n");
  f8:	e3000000 	movw	r0, #0
  fc:	e5821000 	str	r1, [r2]
 100:	e3400000 	movt	r0, #0
 104:	ebfffffe 	bl	0 <printk>
	if (!rc)
 108:	ea000016 	b	168 <init_module+0x168>
		goto err_button_irq_init;

	rc = init_gpios(BUTTON, LED);
 10c:	e3a01036 	mov	r1, #54	; 0x36
 110:	e3a00048 	mov	r0, #72	; 0x48
 114:	ebfffffe 	bl	d0 <init_module+0xd0>
	if (!rc)
 118:	e3500000 	cmp	r0, #0
 11c:	0a00000e 	beq	15c <init_module+0x15c>
		goto err_gpios_init;

	timer_setup(&jiff_timer, timer_func, 0);
 120:	e1a03005 	mov	r3, r5
 124:	e1a02005 	mov	r2, r5
 128:	e2840014 	add	r0, r4, #20
 12c:	e58d5000 	str	r5, [sp]
 130:	e3001000 	movw	r1, #0
 134:	e3401000 	movt	r1, #0
 138:	ebfffffe 	bl	0 <init_timer_key>
	rc = mod_timer(&jiff_timer, _msecs_to_jiffies(delay_ms));
 13c:	e2840014 	add	r0, r4, #20
 140:	e3a01064 	mov	r1, #100	; 0x64
 144:	ebfffffe 	bl	0 <mod_timer>
	if (!rc)
 148:	e3500000 	cmp	r0, #0
 14c:	1a000005 	bne	168 <init_module+0x168>
		goto err_timer_fire;

	return 0;

err_timer_fire:
	deinit_gpios(BUTTON, LED);
 150:	e3a01036 	mov	r1, #54	; 0x36
 154:	e3a00048 	mov	r0, #72	; 0x48
 158:	ebfffffe 	bl	174 <init_module+0x174>
	free_irq(button_irq, (void *)&button_irq_counter);
 15c:	e5960000 	ldr	r0, [r6]
 160:	e59f100c 	ldr	r1, [pc, #12]	; 174 <init_module+0x174>
 164:	ebfffffe 	bl	0 <free_irq>
err_gpios_init:
	deinit_button_irq();
err_button_irq_init:
	// Memory is freed automatically after finishing the program
	return rc;
}
 168:	e3a00000 	mov	r0, #0
 16c:	e28dd00c 	add	sp, sp, #12
 170:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 174:	00000010 	.word	0x00000010

Disassembly of section .exit.text:

00000000 <cleanup_module>:

static void __exit synch_exit(void)
{
   0:	e92d4010 	push	{r4, lr}
	del_timer(&jiff_timer);
   4:	e3004000 	movw	r4, #0
   8:	e3404000 	movt	r4, #0
   c:	e2840014 	add	r0, r4, #20
  10:	ebfffffe 	bl	0 <del_timer>
	deinit_gpios(BUTTON, LED);
  14:	e3a01036 	mov	r1, #54	; 0x36
  18:	e3a00048 	mov	r0, #72	; 0x48
  1c:	ebfffffe 	bl	174 <deinit_gpios>
	free_irq(button_irq, (void *)&button_irq_counter);
  20:	e3003000 	movw	r3, #0
  24:	e3403000 	movt	r3, #0
  28:	e2841010 	add	r1, r4, #16
  2c:	e5930000 	ldr	r0, [r3]
	deinit_button_irq();
}
  30:	e8bd4010 	pop	{r4, lr}
	free_irq(button_irq, (void *)&button_irq_counter);
  34:	eafffffe 	b	0 <free_irq>
